{"version":3,"sources":["Components/Section/Section.jsx","Components/Statistics/Notification.jsx","Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","App.js","index.js"],"names":["Section","children","title","className","defaultProps","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","onLeaveFeedback","options","map","option","onClick","App","state","handleIncrement","event","currentButton","currentTarget","innerText","setState","prevState","countTotalFeedback","Object","values","reduce","acc","feedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAGMA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,OACE,0BAASC,UAAU,mBAAnB,UACa,OAAVD,EACC,oBAAIC,UAAU,0BAAd,SAAyCD,IACvC,KACHD,MAIPD,EAAQI,aAAe,CACrBF,MAAO,MAQMF,QCpBTK,G,MAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,MAE1CD,EAAaD,aAAe,CAC1BE,QAAS,MAOID,QCuCAE,EA/CI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjBD,EAAQ,EACN,qBAAIR,UAAU,mBAAd,UACE,oBAAIA,UAAU,mBAAd,SACE,oBAAGA,UAAU,mBAAb,mBACQ,sBAAMA,UAAU,oBAAhB,SAAqCK,IAAa,SAG5D,qBAAIL,UAAU,mBAAd,UACE,oBAAGA,UAAU,mBAAb,sBACW,sBAAMA,UAAU,oBAAhB,SAAqCM,OAC3C,OAEP,qBAAIN,UAAU,mBAAd,UACE,oBAAGA,UAAU,mBAAb,kBACO,uBAAMA,UAAU,oBAAhB,cAAsCO,QACxC,OAEP,sBAAKP,UAAU,sBAAf,UACE,qBAAIA,UAAU,0BAAd,UACE,oBAAGA,UAAU,mBAAb,oBACS,uBAAMA,UAAU,oBAAhB,cAAsCQ,EAAtC,UACJ,OAGP,oBAAIR,UAAU,sCAAd,SACE,oBAAGA,UAAU,mBAAb,+BACqB,IACnB,uBAAMA,UAAU,oBAAhB,UACa,IAAVQ,EAAc,EAAIC,EADrB,IAC0C,kBAOlD,cAAC,EAAD,CAAcN,QAAQ,uBCjBXO,G,MApBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QAC1C,OACE,8BACGA,EAAQC,KAAI,SAAAC,GAAM,OACjB,wBACEd,UAAU,mBAEVe,QAASJ,EAHX,SAKGG,GAHIA,UCiDAE,E,4MApDbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPW,gBAAkB,SAAAC,GAChB,IAAMC,EAAgBD,EAAME,cAAcC,UAE1C,EAAKC,UAAS,SAAAC,GAAS,sBACpBJ,EAAgBI,EAAUJ,GAAiB,O,EAIhDK,mBAAqB,WAKnB,OAJcC,OAAOC,OAAO,EAAKV,OAAOW,QACtC,SAACC,EAAKC,GAAN,OAAmBD,EAAMC,IACzB,I,EAKJC,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKhB,MAAMZ,KAAO,EAAKoB,qBAAwB,M,4CAE7D,WAAU,IAAD,EACwBS,KAAKjB,MAA5BZ,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQ0B,KAAKT,qBACbhB,EAAqByB,KAAKH,kCAChC,OACE,qCACE,cAAC,EAAD,CAAShC,MAAM,yBAAf,SACE,cAAC,EAAD,CACEY,gBAAiBuB,KAAKhB,gBACtBN,QAAS,CAAC,OAAQ,UAAW,WAIjC,cAAC,EAAD,CAASb,MAAM,aAAf,SACE,cAAC,EAAD,CACEM,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA7Cd0B,a,YCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f9036890.chunk.js","sourcesContent":["import './Section.scss';\nimport propTypes from 'prop-types';\n\nconst Section = ({ children, title }) => {\n  return (\n    <section className=\"section-feedback\">\n      {title !== null ? (\n        <h2 className=\"section-feedback__title\">{title}</h2>\n      ) : null}\n      {children}\n    </section>\n  );\n};\nSection.defaultProps = {\n  title: null,\n};\n\nSection.propTypes = {\n  title: propTypes.string.isRequired,\n  children: propTypes.element.isRequired,\n};\n\nexport default Section;\n","import propTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.defaultProps = {\n  message: null,\n};\n\nNotification.propTypes = {\n  message: propTypes.string,\n};\n\nexport default Notification;\n","import './Statistics.scss';\nimport propTypes from 'prop-types';\nimport Notification from './Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) =>\n  total > 0 ? (\n    <ul className=\"statistics__list\">\n      <li className=\"statistics__item\">\n        <p className=\"statistics__text\">\n          Good: <span className=\"statistics__value\">{good}</span>{' '}\n        </p>\n      </li>\n      <li className=\"statistics__item\">\n        <p className=\"statistics__text\">\n          Neutral: <span className=\"statistics__value\">{neutral}</span>\n        </p>{' '}\n      </li>\n      <li className=\"statistics__item\">\n        <p className=\"statistics__text\">\n          Bad: <span className=\"statistics__value\"> {bad}</span>\n        </p>{' '}\n      </li>\n      <div className=\"statistics__results\">\n        <li className=\"statistics__item--total\">\n          <p className=\"statistics__text\">\n            Total: <span className=\"statistics__value\"> {total} </span>\n          </p>{' '}\n        </li>\n\n        <li className=\" statistics__item--positiveFeedback\">\n          <p className=\"statistics__text\">\n            Positive Feedback:{' '}\n            <span className=\"statistics__value\">\n              {total === 0 ? 0 : positivePercentage}%{' '}\n            </span>\n          </p>\n        </li>\n      </div>\n    </ul>\n  ) : (\n    <Notification message=\"No feedback given\" />\n  );\n\nStatistics.propTypes = {\n  good: propTypes.number.isRequired,\n  neutral: propTypes.number.isRequired,\n  bad: propTypes.number.isRequired,\n  total: propTypes.number.isRequired,\n  positivePercentage: propTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import './FeedbackOptions.scss';\nimport propTypes from 'prop-types';\n\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => {\n  return (\n    <div>\n      {options.map(option => (\n        <button\n          className=\"feedback__button\"\n          key={option}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: propTypes.arrayOf(propTypes.string),\n};\n\nexport default FeedbackOptions;\n","import Section from './Components/Section/';\nimport Statistics from './Components/Statistics';\nimport FeedbackOptions from './Components/FeedbackOptions/';\nimport { Component } from 'react';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = event => {\n    const currentButton = event.currentTarget.innerText;\n\n    this.setState(prevState => ({\n      [currentButton]: prevState[currentButton] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state).reduce(\n      (acc, feedback) => acc + feedback,\n      0,\n    );\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () =>\n    Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return (\n      <>\n        <Section title=\"Please, leave feedback\">\n          <FeedbackOptions\n            onLeaveFeedback={this.handleIncrement}\n            options={['good', 'neutral', 'bad']}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './basic.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}